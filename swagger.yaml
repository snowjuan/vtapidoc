openapi: 3.0.0
info:
  title: Virus Total API V1
  description: API for virustotal, the API include user registration, login; the file API includes upload, download, get file download url, get report of a file.Reanalyze a file, for large file get URL for large file upload.
  version: 1.0.0
servers:
  - url: https://backend.vt.com/api/v1
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname: 
                  type: string
                lastname:
                  type: string
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request, check your request body
  /login:
    post:
      summary: Login with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, invalid username or password
  /user:
    put:
      summary: Update user information
      security:
        - bearerAuth: []
      description: Update user information based on the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User information updated successfully
        '401':
          description: Unauthorized, missing or invalid token
        '403':
          description: Forbidden, user does not have permission to perform this action
  /user/{username}:
    delete:
      summary: Delete user
      security:
        - bearerAuth: []
      description: Delete a user based on the provided username
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user to be deleted
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized, missing or invalid token
        '403':
          description: Forbidden, user does not have permission to perform this action

  /token:
    post:
      summary: Get JWT token
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: JWT token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad request, check your request body
        '401':
          description: Unauthorized, invalid username, password, or apikey
        '403':
          description: Forbidden, access denied
  /file:
    post:
      summary: Upload a file
      security:
        - bearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: Bad request, check your request body
        '401':
          description: Unauthorized, API key is missing or invalid
  /fileurl:
    get:
      summary: Get URL for large file upload
      security:
        - bearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: file SHA256
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                example:
                  {"url": "http://www.vt.com/_ah/upload/AMmfu6b-_DXUeFe36Sb3b0F4B8mH9Nb-CHbRoUNVOPwG/"}
        '400':
          description: Bad request, check your request parameters
        '401':
          description: Unauthorized, invalid apikey or JWT token
  
  /files/{id}/report:
    get:
      summary: Get report for a file
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisReport'
        '404':
          description: File not found
  /files/{id}/analyse:
    post:
      summary: Reanalyze a file
      security:
        - bearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileid:
                  type: string
                  description: ID of the file in VirusTotal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisReport'
        '404':
          description: File not found
  /getprogress:
    get:
      summary: Get progress for a file scanning jobs
      parameters:
        - in: query
          name: FileID
          schema:
            type: string
          required: true
          description: ID of the file to check progress for
      responses:
        '200':
          description: Progress information for the file scanning jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  AVG:
                    type: string
                  status:
                    type: string
                    description: The current status of the file scan
                  ClamAV:
                    type: string
                    description: The result of the ClamAV scan
                  eScan:
                    type: string
                    description: The result of the eScan scan
              example:
                AVG: "2 minutes"
                status: "in queue"
                ClamAV: "Undetected"
                eScan: "Undetected"
  /files/{id}/download:
    get:
      summary: Download a file
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the file
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  
  
  schemas:
    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        email:
          type: string
        apikey:
          type: string
        loginat:
          type: string
          format: date
    AnalysisReport:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        size:
          type: integer
        tags:
          type: string
        last_modification_time:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time
        analysis:
          type: array
          items:
            $ref: '#/components/schemas/AVResult'
        behaviors:
          type: array
          items:
            $ref: '#/components/schemas/Behavior'
      example:
        id: "12345"
        name: "example.exe"
        size: 1024
        tags: ""
        last_modification_time: "2024-04-05T12:00:02"
        is_malware: true
        malware_type: "trojan"
        file_id: "0bf01094f5c699046d8228a8f5d5754ea454e5e58b4e6151fef37f32c83f6497"
        file_type: "Win32 EXE"
        timestamp: "2024-04-05T12:00:00Z"
        history: ""
        analysis:
          - vendor: "Vendor1"
            version: "1.0"
            is_malware: false
            is_signature_valid: true
            signature_algorithm: "SHA256"
          - vendor: "Vendor2"
            version: "2.0"
            is_malware: true
            is_signature_valid: false
            signature_algorithm: "MD5"
        behaviors:
          - connection: "hacker.cc"
            copyfile: true
            deletefile: "['sys.ini', 'win.exe']"
    AVResult:
      type: object
      properties:
        vendor:
          type: string
        version:
          type: string
        is_malware:
          type: boolean
        is_signature_valid:
          type: boolean
        signature_algorithm:
          type: string
      example:
        vendor: "Vendor1"
        version: "1.0"
        is_malware: false
        is_signature_valid: true
        signature_algorithm: "SHA256"
    Behavior:
      type: object
      properties:
        connection: 
          type: string
        copyfile:
          type: boolean
        deletefile:
          type: string
      example:
        connection: "hacker.cc"
        copyfile: true
        deletefile: "['sys.ini', 'win.exe']"
    File:
      type: object
      properties:
        FileID:
          type: string
          format: uuid
          description: Unique identifier for the file.
        MD5:
          type: string
          description: MD5 hash of the file.
        SHA256:
          type: string
          description: SHA-256 hash of the file.
        SHA1:
          type: string
          description: SHA-1 hash of the file.
        Size:
          type: integer
          format: int64
          description: Size of the file in bytes.
        Tags:
          type: array
          items:
            type: string
          description: Tags associated with the file.
        FileType:
          type: string
          description: Type of the file.
        Location:
          type: string
          description: Location of the file.
        Is_Malware:
          type: boolean
          description: Indicates if the file is malware.
        MalWare_Type:
          type: string
          description: Type of malware, if the file is malware.
        Analyse:
          type: array
          items:
            type: object
            properties:
              field1:
                type: string
              field2:
                type: string
            description: Analysis results for the file.
        Behaviors:
          type: array
          items:
            type: object
            properties:
              field1:
                type: string
              field2:
                type: string
            description: Behavior of file.
      example:
        FileID: "1"
        MD5: "md5hash"
        SHA256: "sha256hash"
        SHA1: "sha1hash"
        Size: 1024
        Tags: ["tag1", "tag2"]
        FileType: "filetype"
        Location: "filelocation"
        Is_Malware: false
        MalWare_Type: "malwaretype"
        Analyse: [{"field1": "value1", "field2": "value2"}]
        Behaviors: [{"connection": "hacker.cc", "makecopies": "yes", "deletefiles":["win32.exe","sys.ini"]}]
    Job:
      type: object
      properties:
        jobid:
          type: string
          description: The ID of the job.
        fileid:
          type: string
          description: The ID of the file associated with the job.
        userid:
          type: string
          description: The ID of the user who initiated the job.
        sessionid:
          type: string
          description: The ID of the session associated with the job.
        jobtype:
          type: string
          description: The type of job.
        sandbox_type:
          type: string
          description: The type of sandbox used for the job.
        result:
          type: string
          description: The result of the job.
    Sandbox:
      type: object
      properties:
        id:
          type: string
          description: The ID of the sandbox.
        os:
          type: string
          description: The different OS support
        vendor:
          type: string
          description: The vendor of the sandbox.
        behaviors:
          type: array
          items:
            type: object
            properties:
              field1:
                type: string
              field2:
                type: string
          description: Behavior of file.
    Scan:
      type: object
      properties:
        id:
          type: string
          description: The ID of the upload.
        fileid:
          type: string
          description: The ID of the file associated with the upload.
        createdat:
          type: string
          format: date-time
          description: The timestamp when the upload was created.
        userid:
          type: string
          description: The ID of the user who uploaded the file.
        sessionid:
          type: string
          description: The ID of the session associated with the upload.
        jobstatus:
          type: string
          description: are jobs created, in progress or completed.
  